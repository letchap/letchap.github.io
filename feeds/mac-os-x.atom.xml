<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>letchap - Mac OS X</title><link href="https://letchap.github.io/" rel="alternate"/><link href="https://letchap.github.io/feeds/mac-os-x.atom.xml" rel="self"/><id>https://letchap.github.io/</id><updated>2015-03-21T11:32:00+01:00</updated><subtitle>du Linux, du Python, un peu de Mac</subtitle><entry><title>Petite blague suite à la clean install Yosemite</title><link href="https://letchap.github.io/2015/03/21/petite-blague-suite-a-la-clean-install-yosemite/" rel="alternate"/><published>2015-03-21T11:32:00+01:00</published><updated>2015-03-21T11:32:00+01:00</updated><author><name>letchap</name></author><id>tag:letchap.github.io,2015-03-21:/2015/03/21/petite-blague-suite-a-la-clean-install-yosemite/</id><summary type="html">&lt;p&gt;Après une clean install de Yosemite sur mon iMac mi-2010, j'ai rencontré un problème de consommation excessive de CPU par le programme "Distributeur des actions de dossier".&lt;/p&gt;
&lt;p&gt;La solution de contournenment pour retrouver un ordinateur qui fonctionne normalement est de décocher l'utilisation des actions de dossiers :&lt;/p&gt;
&lt;p&gt;Dans le finder faire …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Après une clean install de Yosemite sur mon iMac mi-2010, j'ai rencontré un problème de consommation excessive de CPU par le programme "Distributeur des actions de dossier".&lt;/p&gt;
&lt;p&gt;La solution de contournenment pour retrouver un ordinateur qui fonctionne normalement est de décocher l'utilisation des actions de dossiers :&lt;/p&gt;
&lt;p&gt;Dans le finder faire un clic droit sur un dossier, n'importe lequel.&lt;/p&gt;
&lt;p&gt;&lt;img alt="clic droit dossier" src="https://letchap.github.io/images/blagueyosemite/clicdroit.png"&gt;&lt;/p&gt;
&lt;p&gt;Puis aller dans service et cliquer sur "configuration des actions de dossier"&lt;/p&gt;
&lt;p&gt;&lt;img alt="service" src="https://letchap.github.io/images/blagueyosemite/service.png"&gt;&lt;/p&gt;
&lt;p&gt;Enfin décocher la case "Activer les actions de ce dossier"&lt;/p&gt;
&lt;p&gt;&lt;img alt="désactiver" src="https://letchap.github.io/images/blagueyosemite/desactiver.png"&gt;&lt;/p&gt;
&lt;p&gt;Il ne reste plus qu'à redémarrer.&lt;/p&gt;
&lt;p&gt;Mais l'intérêt est aussi de savoir pourquoi ce processus s'emballe. Je me note deux petites actions que j'ai faite sans bien être sûr de leur efficacité, néanmoins, ça a l'air de fonctionner :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mettre à jour les caches partagés dyld (avec Onyx par exemple dans l'onglet automation)&lt;/li&gt;
&lt;li&gt;supprimer les fichiers .scpt inutilisés. A la suppression des certaines applications, je me suis aperçu que des fichiers applescript de ces applications n'étaient pas supprimés. Dans le terminal, un petit &lt;code&gt;locate *.scpt&lt;/code&gt; fera l'affaire, puis &lt;code&gt;rm -rf /path/to/fichier.scpt&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Mac OS X"/><category term="Yosemite"/><category term="clean install"/><category term="action de dossier"/><category term="CPU"/></entry><entry><title>Utiliser locate sur OSX</title><link href="https://letchap.github.io/2014/08/06/utiliser-locate-sur-osx/" rel="alternate"/><published>2014-08-06T20:56:00+02:00</published><updated>2014-08-06T20:56:00+02:00</updated><author><name>letchap</name></author><id>tag:letchap.github.io,2014-08-06:/2014/08/06/utiliser-locate-sur-osx/</id><summary type="html">&lt;p&gt;J'aime bien la commande locate pour rechercher un élément sur le ou les disques de mon ordinateur. Elle permet de chercher des fichiers système que ne connait pas spotlight. Par rapport à la commande find, elle est beaucoup plus rapide car elle crée une base de données avec l'ensemble des …&lt;/p&gt;</summary><content type="html">&lt;p&gt;J'aime bien la commande locate pour rechercher un élément sur le ou les disques de mon ordinateur. Elle permet de chercher des fichiers système que ne connait pas spotlight. Par rapport à la commande find, elle est beaucoup plus rapide car elle crée une base de données avec l'ensemble des fichiers et le chemin associée.&lt;/p&gt;
&lt;p&gt;Seule contrainte : avoir une base de données à jour. Et là, grosse surprise, ma base n'est pas à jour, la commande locate ne sert à rien. La misère !&lt;/p&gt;
&lt;p&gt;Reprenons par le commencement. Pour activer la commande locate qui ne l'est pas par défaut, il faut lancer cette commande dans le terminal :&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;launchctl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;load&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;LaunchDaemons&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apple&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plist&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pour savoir comment fonctionne la programmation de travaux avec launchd, je vous renvoie &lt;a href="https://letchap.github.io/2013/08/08/demarrage-automatique-de-travaux-avec-launchd/" title="démarrage automatique de travaux avec launchd"&gt;à un précédent article.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Que contient le fichier plist ? Pour le savoir :&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;/System/Library/LaunchDaemons/com.apple.locate.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ce qui donne :&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;plist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Label&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;com.apple.locate&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Disabled&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ProgramArguments&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/usr/libexec/locate.updatedb&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;LowPriorityIO&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Nice&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;5&lt;span class="nt"&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;KeepAlive&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PathState&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;/var/db/locate.database&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;false/&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;StartCalendarInterval&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Hour&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Minute&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;15&lt;span class="nt"&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Weekday&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;6&lt;span class="nt"&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;AbandonProcessGroup&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Et là, oh surprise, la commande de mise à jour de la base à savoir &lt;code&gt;/usr/libexec/locate.updatedb&lt;/code&gt; ne se déclenche que le samedi à 3h15. Aucune chance d'avoir une base de données à jour.&lt;/p&gt;
&lt;p&gt;Heureusement, il est toujours possible de lancer la mise à jour à la main avec&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;/usr/libexec/locate.updatedb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;C'est un peu long, mais au moins, je suis sûr du résultat du locate.&lt;/p&gt;</content><category term="Mac OS X"/><category term="locate"/><category term="launchctl"/><category term="Mac OS X"/></entry><entry><title>Programmer des travaux avec Automator et iCal</title><link href="https://letchap.github.io/2013/12/19/programmer-des-travaux-avec-automator-et-ical/" rel="alternate"/><published>2013-12-19T20:54:00+01:00</published><updated>2013-12-19T20:54:00+01:00</updated><author><name>letchap</name></author><id>tag:letchap.github.io,2013-12-19:/2013/12/19/programmer-des-travaux-avec-automator-et-ical/</id><summary type="html">&lt;p&gt;Il y a toujours plusieurs façons de faire.&lt;/p&gt;
&lt;p&gt;Il y a quelques mois, nous avons vu comment programmer de manière périodique, sur Mac OS X, &lt;a href="https://letchap.github.io/2013/08/08/demarrage-automatique-de-travaux-avec-launchd/"&gt;l'exécution d'un programme Python avec launchd&lt;/a&gt;, ce programme Python envoyant alors &lt;a href="https://letchap.github.io/2013/08/29/envoyer-une-notification-au-centre-de-notification-de-mountain-lion-avec-python/"&gt;une notification au centre de notification grâce à un décorateur&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Et bien, tout ça …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Il y a toujours plusieurs façons de faire.&lt;/p&gt;
&lt;p&gt;Il y a quelques mois, nous avons vu comment programmer de manière périodique, sur Mac OS X, &lt;a href="https://letchap.github.io/2013/08/08/demarrage-automatique-de-travaux-avec-launchd/"&gt;l'exécution d'un programme Python avec launchd&lt;/a&gt;, ce programme Python envoyant alors &lt;a href="https://letchap.github.io/2013/08/29/envoyer-une-notification-au-centre-de-notification-de-mountain-lion-avec-python/"&gt;une notification au centre de notification grâce à un décorateur&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Et bien, tout ça ne sert à rien. Dans OS X Mavericks, la programmation périodique et l'envoi d'une notification peut se gérer grâce à Automator. Nous repartons de notre programme Python dans lequel nous enlevons tout ce qui concerne l'envoi d'une notification. Et voici comment programmer le tout :&lt;/p&gt;
&lt;h3&gt;Création d'un workflow calendrier dans iCal&lt;/h3&gt;
&lt;p&gt;Nous lançons Automator en choisissant "Alarme Calendrier"&lt;/p&gt;
&lt;p&gt;&lt;a data-lightbox="automator" href="https://letchap.github.io/images/ical/automator.png" title="Automator"&gt;&lt;img alt="Automator" src="https://letchap.github.io/images/ical/automator.png" title="Automator"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Création d'un workflow Automator&lt;/h3&gt;
&lt;p&gt;Puis, nous définissons notre processus Automator avec l'execution d'un programme Ptyhon à partir du termenial et l'envoi d'une notification.&lt;/p&gt;
&lt;p&gt;&lt;a data-lightbox="automator" href="https://letchap.github.io/images/ical/shell.png" title="Workflow Automator"&gt;&lt;img alt="Shell" src="https://letchap.github.io/images/ical/shell.png" title="Automator"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Sauvegarde du workflow&lt;/h3&gt;
&lt;p&gt;Nous enregistrons le processus qui va s'inscrire dans iCal.&lt;/p&gt;
&lt;p&gt;&lt;a data-lightbox="automator" href="https://letchap.github.io/images/ical/save.png" title="Sauvegarde du Workflow"&gt;&lt;img alt="Save" src="https://letchap.github.io/images/ical/save.png" title="Save"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Dans iCal&lt;/h3&gt;
&lt;p&gt;Il ne reste plus qu'à programmer sa périodicité.&lt;/p&gt;
&lt;p&gt;&lt;a data-lightbox="automator" href="https://letchap.github.io/images/ical/ical.png" title="iCal"&gt;&lt;img alt="iCal" src="https://letchap.github.io/images/ical/ical.png" title="iCal"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a data-lightbox="automator" href="https://letchap.github.io/images/ical/periode.png" title="Périodicité"&gt;&lt;img alt="Périodicité" src="https://letchap.github.io/images/ical/periode.png" title="Périodicité"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C'est plus simple, mais évidemment, beaucoup moins fun que de tout faire à la main.&lt;/p&gt;</content><category term="Mac OS X"/><category term="Mac OS X"/><category term="Mavericks"/><category term="Python"/><category term="Automator"/><category term="iCal"/><category term="notification center"/></entry><entry><title>Lancer un programme python depuis automator</title><link href="https://letchap.github.io/2013/11/26/lancer-un-programme-python-depuis-automator/" rel="alternate"/><published>2013-11-26T13:41:00+01:00</published><updated>2013-11-26T13:41:00+01:00</updated><author><name>letchap</name></author><id>tag:letchap.github.io,2013-11-26:/2013/11/26/lancer-un-programme-python-depuis-automator/</id><summary type="html">&lt;p&gt;&lt;a href="https://letchap.github.io/2013/11/25/transformer-un-texte-chinois-en-pdf/"&gt;J'ai un joli script python qui me permet de décoder un texte chinois en UTF8 tout en le tranformant en pdf&lt;/a&gt;. Maintenant, j'aimerais bien pouvoir le lancer d'un simple clic droit, voir même plusieurs fichiers d'un coup.&lt;/p&gt;
&lt;p&gt;Pour cela, sur Mac OS X, il existe un utilitaire sympa, Automator. Il …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://letchap.github.io/2013/11/25/transformer-un-texte-chinois-en-pdf/"&gt;J'ai un joli script python qui me permet de décoder un texte chinois en UTF8 tout en le tranformant en pdf&lt;/a&gt;. Maintenant, j'aimerais bien pouvoir le lancer d'un simple clic droit, voir même plusieurs fichiers d'un coup.&lt;/p&gt;
&lt;p&gt;Pour cela, sur Mac OS X, il existe un utilitaire sympa, Automator. Il va nous permettre de créer un service qui lancera le traitement de notre ou de nos fichiers grâce à un clic droit.&lt;/p&gt;
&lt;p&gt;Des éléments complémentaires sont disponibles sur le site &lt;a href="https://developer.apple.com/library/mac/documentation/AppleApplications/Conceptual/AutomatorConcepts/Articles/ShellScriptActions.html"&gt;d'apple developper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pour créer un service, je commence par choisir "service" dans automator puis, je choisis "exécuter un script Shell" &lt;/p&gt;
&lt;p&gt;&lt;a data-lightbox="automator" href="https://letchap.github.io/images/automator.png" title="Automator"&gt;&lt;img alt="Automator" src="https://letchap.github.io/images/automator.png" title="Automator"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A ce stade, vous avez deux possibilités : vous pouvez au choix saisir vos lignes de script python en sélectionnant /usr/bin/python dans l'interpréteur, ou alors vous pouvez préférez un script shell permettant de lancer le programme python. Je préfère nettement cette deuxième solution pour deux raisons : il n'existe qu'une seule version du programme python, et vous pouvez trapper les erreurs dans un fichier de log.&lt;/p&gt;
&lt;p&gt;Nous saisissons donc notre script d'appel au programme python en shell, tout en oubliant pas de sélectionner "fichier ou dossier", "dans n'importe quelle application" ainsi que "comme arguments".&lt;/p&gt;
&lt;p&gt;Pour passer le fichier d'entrée au programme python, nous utilisons la variable magique "$@".&lt;/p&gt;
&lt;p&gt;Pour débugger le programme, il est bien sûr possible de renvoyer les sorties standard et erreur vers un fichier de log par un petit &lt;code&gt;&amp;gt;&amp;gt; log 2&amp;gt;&amp;amp;1&lt;/code&gt;, ce qui peut s'avérer pratique.&lt;/p&gt;
&lt;p&gt;Pour traiter plusieurs fichiers en entrée, il suffit de faire une petite boucle for dans le script shell.&lt;/p&gt;
&lt;p&gt;Cerise sur le gateau, nous allons ajouter une petite notification en fin de traitement pour nous signaler que ce dernier est terminé. C'est beau.&lt;/p&gt;</content><category term="Mac OS X"/><category term="Mac OS X"/><category term="Mavericks"/><category term="Automator"/><category term="Python"/><category term="shell"/></entry><entry><title>Envoyer une notification au centre de notification de Mountain Lion avec Python</title><link href="https://letchap.github.io/2013/08/29/envoyer-une-notification-au-centre-de-notification-de-mountain-lion-avec-python/" rel="alternate"/><published>2013-08-29T21:20:00+02:00</published><updated>2013-08-29T21:20:00+02:00</updated><author><name>letchap</name></author><id>tag:letchap.github.io,2013-08-29:/2013/08/29/envoyer-une-notification-au-centre-de-notification-de-mountain-lion-avec-python/</id><summary type="html">&lt;p&gt;&lt;a href="https://letchap.github.io/2013/08/08/demarrage-automatique-de-travaux-avec-launchd/" title="Démarrage automatique de travaux avec launchd"&gt;Dans mon dernier article&lt;/a&gt;, nous avons vu comment programmer le déclenchement périodique d'un programme dans Mountain Lion grace à l'utilitaire launchd. J'aimerais maintenant être averti de la bonne exécution de mon programme via le centre de notifciation de Mountain Lion.&lt;/p&gt;
&lt;p&gt;Ce qui est décrit ci-dessous est librement inspiré de cet …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://letchap.github.io/2013/08/08/demarrage-automatique-de-travaux-avec-launchd/" title="Démarrage automatique de travaux avec launchd"&gt;Dans mon dernier article&lt;/a&gt;, nous avons vu comment programmer le déclenchement périodique d'un programme dans Mountain Lion grace à l'utilitaire launchd. J'aimerais maintenant être averti de la bonne exécution de mon programme via le centre de notifciation de Mountain Lion.&lt;/p&gt;
&lt;p&gt;Ce qui est décrit ci-dessous est librement inspiré de cet &lt;a href="http://dbader.org/blog/alfred-timer-extension" title="A countdown timer extension for Alfred"&gt;article en anglais&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pour pouvoir envoyer un message dans le centre de notification de Mountain Lion et afficher une pop-up, il faut obligatoirement que l'application soit reconnu par Apple via le "bundle identifier". Pour mon petit programme Python à moi, je ne vais pas demander un identifiant, alors pour pouvoir malgré tout envoyer un message, je vais adopter la stratégie du coucou et emprunter un bundle identifier existant. Par exemple celui de du programme Python Launcher (puisque que je lance un programme Python). Je vais donc faire croire au centre de notification que c'est l'application Python Launcher qui envoie un message.&lt;/p&gt;
&lt;p&gt;Tout d'abord, comment récupérer le bundler identifier? Avec la commande suivante dans le terminal :&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;osascript&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id of app &amp;quot;Python Launcher&amp;quot;&amp;#39;&lt;/span&gt;
org.python.PythonLauncher
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Maintenant, décorons !&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;
&lt;span class="normal"&gt;39&lt;/span&gt;
&lt;span class="normal"&gt;40&lt;/span&gt;
&lt;span class="normal"&gt;41&lt;/span&gt;
&lt;span class="normal"&gt;42&lt;/span&gt;
&lt;span class="normal"&gt;43&lt;/span&gt;
&lt;span class="normal"&gt;44&lt;/span&gt;
&lt;span class="normal"&gt;45&lt;/span&gt;
&lt;span class="normal"&gt;46&lt;/span&gt;
&lt;span class="normal"&gt;47&lt;/span&gt;
&lt;span class="normal"&gt;48&lt;/span&gt;
&lt;span class="normal"&gt;49&lt;/span&gt;
&lt;span class="normal"&gt;50&lt;/span&gt;
&lt;span class="normal"&gt;51&lt;/span&gt;
&lt;span class="normal"&gt;52&lt;/span&gt;
&lt;span class="normal"&gt;53&lt;/span&gt;
&lt;span class="normal"&gt;54&lt;/span&gt;
&lt;span class="normal"&gt;55&lt;/span&gt;
&lt;span class="normal"&gt;56&lt;/span&gt;
&lt;span class="normal"&gt;57&lt;/span&gt;
&lt;span class="normal"&gt;58&lt;/span&gt;
&lt;span class="normal"&gt;59&lt;/span&gt;
&lt;span class="normal"&gt;60&lt;/span&gt;
&lt;span class="normal"&gt;61&lt;/span&gt;
&lt;span class="normal"&gt;62&lt;/span&gt;
&lt;span class="normal"&gt;63&lt;/span&gt;
&lt;span class="normal"&gt;64&lt;/span&gt;
&lt;span class="normal"&gt;65&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;objc&lt;/span&gt;

&lt;span class="c1"&gt;########################################################################&lt;/span&gt;
&lt;span class="c1"&gt;#                             Le décorateur                            #&lt;/span&gt;
&lt;span class="c1"&gt;########################################################################&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;swizzle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Decorator to override an ObjC selector&amp;#39;s implementation with a&lt;/span&gt;
&lt;span class="sd"&gt;    custom implementation (&amp;quot;method swizzling&amp;quot;).&lt;/span&gt;

&lt;span class="sd"&gt;    Use like this:&lt;/span&gt;

&lt;span class="sd"&gt;    @swizzle(NSOriginalClass, &amp;#39;selectorName&amp;#39;)&lt;/span&gt;
&lt;span class="sd"&gt;    def swizzled_selectorName(self, original):&lt;/span&gt;
&lt;span class="sd"&gt;        --&amp;gt; `self` points to the instance&lt;/span&gt;
&lt;span class="sd"&gt;        --&amp;gt; `original` is the original implementation&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;old_IMP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instanceMethodForSelector_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SEL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old_IMP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;new_IMP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;old_IMP&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;old_IMP&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;objc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classAddMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_IMP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;


&lt;span class="nd"&gt;@swizzle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lookUpClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NSBundle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bundleIdentifier&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;swizzled_bundleIdentifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Swizzle [NSBundle bundleIdentifier] to make NSUserNotifications&lt;/span&gt;
&lt;span class="sd"&gt;    work.&lt;/span&gt;

&lt;span class="sd"&gt;    To post NSUserNotifications OS X requires the binary to be packaged&lt;/span&gt;
&lt;span class="sd"&gt;    as an application bundle. To circumvent this restriction, as it would&lt;/span&gt;
&lt;span class="sd"&gt;    be difficult (impossible?) to implement in an Alfred Extension,&lt;/span&gt;
&lt;span class="sd"&gt;    we modify `bundleIdentifier` to return a fake bundle identifier.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# Return Python Launcher&amp;#39;s bundle identifier to display the Python Launcher logo.&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;org.python.PythonLauncher&amp;#39;&lt;/span&gt;



&lt;span class="c1"&gt;########################################################################&lt;/span&gt;
&lt;span class="c1"&gt;#      L&amp;#39;envoi de la noticiation au centre de notification             #&lt;/span&gt;
&lt;span class="c1"&gt;########################################################################&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Display a NSUserNotification on Mac OS X &amp;gt;= 10.8&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;NSUserNotification&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lookUpClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NSUserNotification&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;NSUserNotificationCenter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lookUpClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NSUserNotificationCenter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;notification&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NSUserNotification&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;notification&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTitle_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;notification&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setInformativeText_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;NSUserNotificationCenter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultUserNotificationCenter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deliverNotification_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a class="button small" href="https://letchap.github.io/code/decorateur.py" title="Télécharger decorateur.py"&gt;Télécharger decorateur.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Le principe de base est de "décorer" la fonction renvoyant le bundle identifier, c'est à dire que nous affectons son comportement temporairement (mais sans la modifier), pour qu'elle renvoie l'identifiant que nous lui passons. Pour cela, nous utilisons un décorateur Python. Pour plus d'informations sur le fonctionnement des décorateurs, vous pouvez aller sur le &lt;a href="http://www.siteduzero.com/informatique/tutoriels/apprenez-a-programmer-en-python/les-decorateurs" title="Les décorateurs Python"&gt;site du zéro&lt;/a&gt; ou sur &lt;a href="http://sametmax.com/comprendre-les-decorateurs-python-pas-a-pas-partie-1/" title="Les décorateurs Python première partie"&gt;le blog de Sam et Max&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ensuite dans la fonction notify(), nous envoyons un message au centre de notification de Mountain Lion qui pensera que c'est l'application Python Launcher qui envoie le flux. Colossale feinte de sioux !&lt;/p&gt;
&lt;p&gt;Le résultat en image&lt;/p&gt;
&lt;p&gt;&lt;img alt="exemple notification" src="https://letchap.github.io/images/notif.png"&gt;&lt;/p&gt;
&lt;p&gt;Le tout s'appuie sur le projet PyObjC qui développe une passerelle entre Python et ObjC et dont vous trouverez la documentation &lt;a href="http://pythonhosted.org/pyobjc/" title="Python ObjC"&gt;ici&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Contrairement au paquet pync (un wrapper Python de terminal-notifier qui permet d'envoyer des messages au centre de notification depuis le terminal) qui ne sait pas envoyer des messages hors d'une session du terminal, ici, il sera possible d'envoyer des notifications même si le programme est déclenché en mode batch par launchd.&lt;/p&gt;
&lt;p&gt;Voilà, c'est tout pour Mac OS X pour le moment, la prochaine fois, retour sur Linux.&lt;/p&gt;
&lt;p&gt;Pour la petite histoire, ce qu'on vient de faire tient en trois lignes de code sous Linux grâce à la bibliothèque pynotify :&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;pynotify&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Free.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pynotify&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Titre&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# Titre&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# Message&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;/home/letchap/Image/application_pdf.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Image&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</content><category term="Mac OS X"/><category term="PyObjC"/><category term="Python"/><category term="Mac OS X"/><category term="Mountain Lion"/></entry><entry><title>Démarrage automatique de travaux avec launchd</title><link href="https://letchap.github.io/2013/08/08/demarrage-automatique-de-travaux-avec-launchd/" rel="alternate"/><published>2013-08-08T23:04:00+02:00</published><updated>2013-08-08T23:04:00+02:00</updated><author><name>letchap</name></author><id>tag:letchap.github.io,2013-08-08:/2013/08/08/demarrage-automatique-de-travaux-avec-launchd/</id><summary type="html">&lt;p&gt;Aujourd'hui nous allons (temporairement) quitter le monde GNU/Linux pour celui de Mac OS X et voir comment réaliser l'équivalent de cron / anacron sur OS X avec l'utilitaire launchd. &lt;/p&gt;
&lt;p&gt;Le besoin de départ est de lancer tous les mois à date fixe un programme python, y compris au redémarrage du …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Aujourd'hui nous allons (temporairement) quitter le monde GNU/Linux pour celui de Mac OS X et voir comment réaliser l'équivalent de cron / anacron sur OS X avec l'utilitaire launchd. &lt;/p&gt;
&lt;p&gt;Le besoin de départ est de lancer tous les mois à date fixe un programme python, y compris au redémarrage du Mac si celui est éteint le jour du lancement programmé (ce dernier point n'est d'ailleurs pas permis nativement par le couple cron / anacron).&lt;/p&gt;
&lt;p&gt;Pour rédiger cet article, je me suis inspiré d'une part de &lt;a href="http://nathangrigg.net/2012/07/schedule-jobs-using-launchd/" title="Schedule jobs using launchd"&gt;ce post en anglais&lt;/a&gt; et d'autre part de la &lt;a href="http://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html" title="Création de démons et d'agents sur OS X"&gt;documentation apple sur launchd et la création d'agents&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Le principe de fonctionnement est le suivant : au démarrage du Mac, l'utilitaire Mac OS X launchd liste l'ensemble des travaux faisant l'objet d'un lancement programmé. Et pour programmer un lancement automatique, il va nous falloir deux éléments :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;un agent permettant de déclencher le travail en question &lt;/li&gt;
&lt;li&gt;puis ajouter notre agent à la liste des travaux programmés.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;L'agent : le fichier de configuration plist&lt;/h3&gt;
&lt;p&gt;L'agent va se définir dans un fichier xml avec une extension plist. Ce fichier contient des informations sur le programme à lancer avec ses éventuels paramètres de lancement ainsi que les informations sur la fréquence de déclenchement. &lt;/p&gt;
&lt;p&gt;Les fichiers plist que vous allez créer sont à stocker de préférence dans le répertoire ~/Library/LaunchAgents. Le gros avantage de les créer à cet endroit est que vos agents launchd seront pris en compte automatiquement au démarrage du Mac.&lt;/p&gt;
&lt;p&gt;La convention de nommage d'un fichier plist est de prendre un nom de domaine à l'envers. Ici, comme mon programme python récupère les factures freebox, je l'ai simplement appelé fr.free.facture.plist.&lt;/p&gt;
&lt;p&gt;Détaillons un peu le fichier plist :&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;plist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Label&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;fr.free.facture&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ProgramArguments&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/usr/bin/python&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/usr/local/bin/free.py&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;StartCalendarInterval&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Hour&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;7&lt;span class="nt"&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Minute&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Day&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;6&lt;span class="nt"&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Les 3 premières lignes sont des informations d'entête, en particulier, nous voyons que nous avons bien à faire à un format xml. Ces lignes d'entête peuvent être reprises sans modification.&lt;/p&gt;
&lt;p&gt;La partie intéressante se situe après.&lt;/p&gt;
&lt;p&gt;D'abord, en lignes 5 et 6  nous nommons notre agent (avec le même nom que le fichier, c'est plus simple).&lt;/p&gt;
&lt;p&gt;Puis nous donnons des informations sur le programme à lancer. Et là : &lt;strong&gt;ATTENTION !!!!&lt;/strong&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Il faut absolument mettre les chemins sous forme absolue et non relative si vous ne voulez pas vous embêter avec le PATH de launchd,&lt;/li&gt;
&lt;li&gt;Il faut absolument lui donner le chemin vers l'interpréteur python.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si vous ne faites pas ça, vous allez pouvoir lancer votre agent à la main depuis le terminal (ce que nous allons voir juste après) et cela va très bien se passer, et vous ne comprendrez pas pourquoi cela ne fonctionne pas au démarrage de l'ordinateur. Les chemins complets vers le programme et l'interpréteur vous éviterons quelques migraines.&lt;/p&gt;
&lt;p&gt;Enfin, nous renseignons les éléments de périodicité. Dans cet exemple, nous déclenchons notre programme tous les 6 du mois à 7h00. Le fait que le mois ne soit pas renseigné signifie "tous les mois".&lt;/p&gt;
&lt;p&gt;Il est possible de renseigner d'autres types de fréquence, par exemple tous les 90 secondes, ainsi que tout un tas d'options. Le plus simple est de se référer à la documentation apple sur launchd (voir le lien en début d'article).&lt;/p&gt;
&lt;h3&gt;Ajout à la liste des travaux programmés&lt;/h3&gt;
&lt;p&gt;Il existe deux façons d'ajouter notre agent la liste des travaux pris en charge par launchd.&lt;/p&gt;
&lt;p&gt;La première, que je ai déjà évoqué, est de placer le fichier plist dans le bon répertoire, à savoir ~/Library/LaunchAgents. La seule contrainte est de redémarrer l'ordinateur pour prise en compte de l'agent.&lt;/p&gt;
&lt;p&gt;Si vous n'avez pas envie d'attendre jusqu'au prochain reboot, ou même si vous souhaitez tester votre agent, il existe un utilitaire disponible à partir du terminal et permettant de gérer ses agents, launchctl :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ launchctl list&lt;/code&gt; permet de lister les agents actifs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ launchctl load /chemin/vers/monagent.plist&lt;/code&gt; permet de charger l'agent dans la liste prise en compte par launchd, le programme sera alors démarrer avec la périodicité définie dans le fichier plist. Si vous avez le moindre message d'erreur au chargement, c'est que le fichier plist est mal formaté.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ launchctl start monagent&lt;/code&gt; permet de déclencher manuellement et immédiatement l'agent. Cela permet de tester son bon fonctionnement. Ici, c'est le nom de l'agent que nous donnons, pas le nom du fichier.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Maintenant que mon programme tourne tout seul sans que j'intervienne, j'aimerais qu'il m'envoie un petit message dans le centre de notification pour dire qu'il a bien travaillé, ce sera l'objet du prochain article, et après retour à GNU/Linux.&lt;/p&gt;</content><category term="Mac OS X"/><category term="Mac OS X"/><category term="launchd"/><category term="launchctl"/><category term="plist"/><category term="cron"/><category term="anacron"/></entry><entry><title>Transférer des fichiers de Lubuntu vers Mountain Lion</title><link href="https://letchap.github.io/2013/02/22/transferer-des-fichiers-de-lubuntu-vers-mountain-lion/" rel="alternate"/><published>2013-02-22T21:08:00+01:00</published><updated>2013-02-22T21:08:00+01:00</updated><author><name>letchap</name></author><id>tag:letchap.github.io,2013-02-22:/2013/02/22/transferer-des-fichiers-de-lubuntu-vers-mountain-lion/</id><summary type="html">&lt;p&gt;Comme je l’expliquais dans l’article précédent, avec Lubuntu, il n’existe pas en natif de moyen simple de transférer des fichiers en FTP (il faut installer Filezilla).&lt;/p&gt;
&lt;p&gt;De la même manière, il n’existe pas en natif de moyen simple de communiquer avec un système Mac OS X …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Comme je l’expliquais dans l’article précédent, avec Lubuntu, il n’existe pas en natif de moyen simple de transférer des fichiers en FTP (il faut installer Filezilla).&lt;/p&gt;
&lt;p&gt;De la même manière, il n’existe pas en natif de moyen simple de communiquer avec un système Mac OS X.&lt;/p&gt;
&lt;p&gt;Il existe 2 solutions pour le faire, une compliquée et pas très rapide, mais pour la beauté du geste, je vais la décrire, une super simple et super rapide, ma préférée.&lt;/p&gt;
&lt;h3&gt;1) La solution compliquée et lente : utiliser le protocole de OS X AFP avec NETATALK&lt;/h3&gt;
&lt;p&gt;AFP est le protocole natif de transfert de fichier de Mac OS X. Par défaut, il n’est pas présent sur Lubuntu. Pour mettre son Mac et son PC en réseau, il faut utiliser NETATALK.&lt;/p&gt;
&lt;p&gt;J’avais installé cette solution avant de découvrir SFTP. La procédure d’installation est assez complexe, mais j’ai trouvé un très bon tutoriel &lt;a href="http://www.monnetamoi.net/articles.php?lng=fr&amp;amp;pg=81" title="Installer netatalk"&gt;ici&lt;/a&gt;. Je l’ai un peu adapté à ma sauce, notamment en m’embêtant un peu moins avec les droits (je n’ai pas créé de répertoire spécial pour les transferts par exemple, et donc pas eu besoin de faire de chmod non plus), par défaut j’ai eu accès à l’ensemble du disque dur de mon PC depuis mon Mac. En même temps, seule la petite famille utilise ces deux ordinateurs donc tout le monde peut avoir accès à tout.&lt;/p&gt;
&lt;p&gt;Cette solution ne fonctionne qu’avec les deux ordinateurs allumés et uniquement depuis le Mac. Le transfert peut se faire dans les deux sens.&lt;/p&gt;
&lt;p&gt;En revanche, j’ai abandonné assez rapidement cette solution, en dehors du coté assez complexe de la mise en place, je trouve les transferts de fichiers assez lents et consommateur en ressources machine. Mais ça marche.&lt;/p&gt;
&lt;p&gt;N’hésiter pas à me demander si vous voulez plus de détails.&lt;/p&gt;
&lt;h3&gt;2) La solution simple et rapide : SFTP et Cyberduck&lt;/h3&gt;
&lt;p&gt;Et puis, j’ai trouvé une solution beaucoup plus simple et beaucoup plus rapide en termes de temps de transfert : utiliser le protocole SFTP avec Cyberduck. SFTP, c’est du FTP sécurisé avec un échange de clé de sécurité. Dans mon exemple, cet échange de clé est transparent.&lt;/p&gt;
&lt;h4&gt;Sur Lubuntu&lt;/h4&gt;
&lt;h5&gt;1) Installer openssh-server&lt;/h5&gt;
&lt;p&gt;Le logiciel openssh-server vous permettra de transformer votre PC en serveur SFTP, et donc vous permettra de vous connecter depuis Mac OS X en SFTP.&lt;/p&gt;
&lt;p&gt;Cela peut se faire à partir de l’installateur de paquet Synaptic.&lt;/p&gt;
&lt;p&gt;Par défaut, le serveur sera allumé au démarrage de l’ordinateur.&lt;/p&gt;
&lt;h5&gt;2) Récupérer l’adresse IP de l’ordinateur&lt;/h5&gt;
&lt;p&gt;Un simple clic droit sur l’icône de connexion réseau vous donnera l’information.&lt;/p&gt;
&lt;p&gt;C’est tout sur Lubuntu.&lt;/p&gt;
&lt;h4&gt;Sur Mac OS X&lt;/h4&gt;
&lt;p&gt;J’ai fait cette installation avec la version Mountain Lion de OS X. Je pense que cela fonctionne avec les versions antérieures.&lt;/p&gt;
&lt;h5&gt;1) Installer Cyberduck&lt;/h5&gt;
&lt;p&gt;Cyberduck est un logiciel FTP bien connu des Mac users. Il est disponible gratuitement sur le site de &lt;a href="http://cyberduck.ch/" title="Cyberduck"&gt;Cyberduck&lt;/a&gt; (payant sur le Mac App Store).&lt;/p&gt;
&lt;h5&gt;2) Créer une nouvelle connexion SFTP en précisant&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;L’adresse IP&lt;/li&gt;
&lt;li&gt;Le port : 22&lt;/li&gt;
&lt;li&gt;Les login et mot de passe de votre session Lubuntu&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dites Ok quand Cyberduck vous pose une question.&lt;/p&gt;
&lt;p&gt;Et comme par magie, vous êtes connecté à Lubuntu, sur l’ensemble du disque dur.&lt;/p&gt;
&lt;p&gt;Et c’est tout sur Mac OS X. Simple, non ?&lt;/p&gt;
&lt;p&gt;Cette solution ne fonctionne qu’avec les deux ordinateurs allumés et uniquement depuis le Mac. Le transfert peut se faire dans les deux sens.&lt;/p&gt;
&lt;p&gt;Encore une fois, cela reste très simple car je ne m’embête pas à gérer des droits utilisateurs, restant dans le cadre d’une utilisation familiale. Mais qu’est ce que c’est pratique ! Plus de copie sur clé USB, et en plus le transfert est hyper rapide.&lt;/p&gt;</content><category term="Mac OS X"/><category term="SFTP"/><category term="Cyberduck"/><category term="Lubuntu"/><category term="Mountain Lion"/><category term="NETATALK"/><category term="openssh-server"/><category term="OS X"/><category term="Réseau"/></entry></feed>